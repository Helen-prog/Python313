*.jpg (jpeg)
*.png
*.gif

left | center | right | top | bottom

file:///D:/Python313/HTML/form/file.php?first-name=gfgfgh&psw=gfghfg
file:///D:/Python313/HTML/form/form.html?first-name=fdfgd&psw=#file.php


file:///D:/Python313/HTML/form/form.html?first-name=Olga&psw=123456#file.php
file:///D:/Python313/HTML/form/form.html#file.php


Shift + Alt + F
file:///D:/Python313/JS/index.html?name1=Hello#text.php


Win + R => cmd
python
py

1.py

print("Hello World!")

quit()


IDLE

import keyword
keyword.kwlist



0-9

ворона - 1

вороны - 2 3 4

ворон - 5 6 7 8 9 0

Система контроля версий (Version Control Systems, VCS) — это система, сохраняющая изменения в одном или нескольких файлах так, чтобы потом можно было восстановить определённые старые версии.

git --version
git --help

git init 
- создание репозитория (применяют один раз для одного репозитория)

git status
- проверка статуса репозитория (в каком состоянии репозиторий)

git add -A
		-A, --all - все файлы, которые находятся в папке и во свех подпапках
		main.py - один файл
		. - все файлы из текущей директории


git config --global user.name 'new_user'
git config --global user.name

git config --global user.email 'test@mail.ru'
git config --global user.email

git commit -m "first commit"
- создание конторольной точки

text.txt
folder
	test.txt

.gitignore

git branch
- просмотр веток

git branch test
- создали ветку

git branch -D test
- удаление ветки


git branch readme

git checkout readme
- перейти на ветку readme


readme.md
git checkout master


master	 ->		readme
				readme.md
				
git merge readme
- слияние ветки readme с веткой master				

git branch -D readme

git log
- история коммитов


токен

Win + R => control

https://github.com
имя_пользователя
токен

git remote add origin https://github.com/Helen-prog/Python313.git
git push -u origin master

ceb3bafab983bc38d9bb392a09675cb6e8beecb7

1) git add .
2) git commit -m "added print"
3) git push

git clone https://github.com/Helen-prog/Python313.git

git pull
- забираем изменения с удаленного репозитория в локальный


test.txt


свойства (поля, переменные)
	- статическе
	- динамические
методы (функции)
	- экземпляра класса (self)
	- статические ()
	- класса (cls)

Модификаторы доступа
public -      name
protected -  _name
private -   __name


5! = 1 * 2 * 3 * 4 * 5 = 120

main.py

Модули
Пакеты

geometry
	rect.py
	sq.py
	trian.py
	
import sys
sys.path

math

car
	__init__.py
	carclass.py
	electrocar.py
	
Упоковка данных

сериализация 
десериализация


1. marshal (*.pyc)
2. pickle
3. json

dump() - сохраняет данные в открытый файл
dumps() - сохраняет данные в строку

load() - cчитывает данные из файла
loads() - cчитывает данные из строки


{
  {
    "name": "ffgggae",
    "tel": "0703526611"
  },
  {
    "name": "fefacea",
    "tel": "5895717390"
  }
}

{
	"ГК Python": {
		"Nikolaenko": [2, 3, 5, 4, 2],
		"Bodnya": [5, 4, 3, 4, 5, 3]
	}
	"ГК Web": {
		"Birukov": [3, 5, 3, 2, 5, 4]
	}
}

data = {
	"ГК Python":{
		"Nikolaenko": [2, 3, 5, 4, 2],
		"Bodnya": [5, 4, 3, 4, 5, 3]
	}
}

stud_list = {
	"Nikolaenko": [2, 3, 5, 4, 2],
	"Bodnya": [5, 4, 3, 4, 5, 3]
}

pip install requests

(venv)


data.csv

Имя,Профессия,Год рождения
Виктор,Веб-дизайнер,1995
Игорь,Программист,1983

csv.reader() - []
csv.DictReader() - {}

csv.writer() - []
csv.DictWriter() - {}


pip install beautifulsoup4 или bs4

pip install lxml

https://ru.wordpress.org/plugins/browse/blocks/page/1/
https://ru.wordpress.org/plugins/browse/blocks/page/2/
https://ru.wordpress.org/plugins/browse/blocks/page/3/

https://ru.wordpress.org/plugins/browse/blocks/page/24/


MVC (Model View Controller)
Модель Представление Контроллер 

• Модель — этот компонент отвечает за данные, а также определяет структуру приложения. 
• Представление — этот компонент отвечает за взаимодействие с пользователем. То есть код компонента view определяет внешний вид приложения и способы его использования.
• Контроллер — этот компонент отвечает за связь между model и view. Код компонента controller определяет, как сайт реагирует на действия пользователя. По сути, это мозг
MVC-приложения.


articles
	project_articles.py
	controller.py
	view.py
	model.py
	

Базы данных

*.db, *.sqlite, *.db3, *.sqlite3

SELECT [ALL | DISTINCT] {* | столбец_1 [, столбец_N]}
FROM таблица1 [, таблица2]
WHERE условие
	=, ==, <>, !=, <, <=, >, >=
	AND, OR
	[NOT] BETWEEN начальное_значение AND конечное_значение
	[NOT] LIKE шаблон_строки
		% - любое количество символов
		_ - один любой символ
	[NOT] GLOB регулярное_выражение
		* - любое количество символов
		? - соответстует одному повторению
		. - один любой символ
		[символы]
		[начальный_символ-конечный_символ]
		[^0-9] - все кроме заданных значений
	IS [NOT] NULL
	[NOT] IN (набор_значений | выражение)
	
	EXISTS (проверка существования)
	
GROUP BY (группировать по)
HAVING (условие)	
	
ORDER BY {столбец_1 | номер_столбца} [ASC | DESC], ...
LIMIT количество_строк [OFFSET смещение]		
	LIMIT [смещение,] количество_строк 		
		
		
INSERT - добавление новой строки в базу данных
UPDATE - изменение строки в существтующей БД
DELETE - удаление строки из БД


INSERT INTO имя_таблицы [(столбец_1 [, столбец_n])]
VALUES (значени_1, [, значение_n])


INSERT INTO имя_таблицы [(столбец_1 [, столбец_n])]
SELECT список_столбцов
FROM список_таблиц
WHERE условие


UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_2=значение_2
[WHERE условие]
		

DELETE FROM имя_таблицы
WHERE условие


Логическая база данных
Физическая база данных


Декартовое произведение (все возможные комбинации каждой строки одной таблицы с каждой строкой другой таблицы)


Функции агрегирования
SUM  (только числовые типы)
AVG  (только числовые типы)
COUNT
MIN
MAX


FORIEN KEY (столбец_1, столбец_N)
REFERENCES имя_таблицы (столцец_1)
[ON DELETE действие]
[ON UPDATE действие]

CASCADE - автоматически удаляет или изменяет строки из зависимой таблицы при удалении или изменении связанных строк в главной таблице

SET NULL - при удалении или обновлении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение NULL

SET DEFAULT - при удалении строки из главной таблицы устанавливает для столбца внешнего ключа значение по умолчанию

RESTRICT (NO ACTION) - отклоняет удаление или изменение строк в главной таблице при наличии связанных строк в зависимой таблице

Подзапросы (вложенные запросы)
- однострочный запросы
	(>, <, <=, >=, !=, <>, =)
- многострочные запросы
	(IN [NOT IN])



SELECT o.amt
FROM Orders o, Salespeople s
WHERE s.sname = 'Rifkin' AND s.snum=o.snum;

SELECT amt
FROM Orders
WHERE snum =
    (SELECT snum
    FROM Salespeople
    WHERE sname = 'Rifkin');


UNION
UNION ALL

SELECT столбцы
FROM таблица1 [INNER] JOIN таблица2 ON условие1

SELECT столбцы
FROM таблица1 LEFT JOIN таблица2 ON условие1


cars = [
 {'model': 'Audi', 'price': 23000},
 {'model': 'Skoda', 'price': 17300},
 {'model': 'Renault', 'price': 44300},
 {'model': 'Wolksvagen', 'price': 21300}
]



persons = [
 {"name": "Алексей", "year": 18, "weight": 78.5},
 {"name": "Никита", "year": 28, "weight": 82.3},
 {"name": "Виталий", "year": 33, "weight": 94.0}
]

templates
	header.html
	main.html
	footer.html
	
	dialog.html
	
	index.html
	
	about.html
	page.html
	
	
Flask
Django

pip install Flask

http://127.0.0.1:5000/
http://127.0.0.1:5000/index


templates
	base.html
	index.html
	about.html
	contact.html
	page404.html
	login.html
static
	css
		style.css
	
http://127.0.0.1:5000/profile/user/5
http://127.0.0.1:5000/login


int - только цифры
float - только вещественные цисла
path - любые допустимые символы URL + "/"


• flash() – формирование сообщения пользователю;
• get_flashed_messages() – обработка сформированных сообщений в шаблоне документа.


import os
os.urandom(20).hex()

from fldbsite.fldbsite import create_db
create_db()

templates
	base.html
	index.html
	add_post.html
	post.html


http://127.0.0.1:5000/post/1

http://127.0.0.1:5000/post/framework-flask-intro


pip install django


django-admin startproject password_generator_project
- создание нового проекта

python manage.py runserver
- запуск сервера

http://127.0.0.1:8000/

python manage.py runserver 4000
python manage.py runserver 1.2.3.4:4000

python manage.py startapp generator
- создание нового приложения


generator
	templates
		generator
			home.html
			password.html
			base.html
	static
		css
			style.css
			
			
			
			
http://127.0.0.1:8000/?length=2

django-admin startproject personal_portfolio

python manage.py startapp skills
python manage.py startapp blog

second


pip install Pillow

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser


http://127.0.0.1:8000/
http://127.0.0.1:8000/blog/
http://127.0.0.1:8000/blog/1


third

django-admin startproject todos
python manage.py startapp todo

python manage.py migrate
python manage.py createsuperuser

models.CASCADE - если пользователь будет удален, то все его задачи удалятся
models.PROTECT - запрещает удалять пользователя, пока у него есть задачи
models.SET_NULL - задачи останутся в БД, даже при удалении пользователя, но значение в поле задачи изменится на None
model.SET_DEFAULT - задачи останутся в БД, даже при удалении пользователя, но значение в поле задачи изменится на значение заданное по умолчанию

python manage.py makemigrations
python manage.py migrate

forms.py

fourth
django-admin startproject devsearch
python manage.py startapp projects
python manage.py startapp users

OneToOneField - связь один к одному
ForeingKey - связь один ко многим
ManyToManyField - связь многие ко многим


python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py shell

from projects.models import Project
quit()

utils.py
pagination.html

projects -> queryset

http://127.0.0.1:8000/projects/?page=5
http://127.0.0.1:8000/projects/?page=3

http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?page=2

http://127.0.0.1:8000/projects/?search_query=web&page=2
http://127.0.0.1:8000/projects/?search_query=web&page=3

http://127.0.0.1:8000/?search_query=dev&page=2


fifth
django-admin startproject programming_blog
python manage.py startapp blog


utils.py

file:///D:/Java313/JavaScript/file.php?title=qqq&text=www
file:///D:/Java313/JavaScript/index.html

file:///D:/Java313/JavaScript/index.html

https://cdn4.iconfinder.com/
